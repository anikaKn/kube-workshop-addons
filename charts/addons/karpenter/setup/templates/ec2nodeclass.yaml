# apiVersion: karpenter.sh/v1
# kind: NodePool
# metadata:
#   name: default
# spec:
#   # Template section that describes how to template out NodeClaim resources that Karpenter will provision
#   # Karpenter will consider this template to be the minimum requirements needed to provision a Node using this NodePool
#   # It will overlay this NodePool with Pods that need to schedule to further constrain the NodeClaims
#   # Karpenter will provision to launch new Nodes for the cluster
#   template:
#     # metadata:
#     #   # Labels are arbitrary key-values that are applied to all nodes
#     #   labels:
#     #     billing-team: my-team

#     #   # Annotations are arbitrary key-values that are applied to all nodes
#     #   annotations:
#     #     example.com/owner: "my-team"
#     spec:
#       # References the Cloud Provider's NodeClass resource, see your cloud provider specific documentation
#       nodeClassRef:
#         group: karpenter.k8s.aws  # Updated since only a single version will be served
#         kind: EC2NodeClass
#         name: default
#       # Requirements that constrain the parameters of provisioned nodes.
#       # These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.
#       # Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.
#       # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators
#       requirements:
#         # - key: "karpenter.k8s.aws/instance-category"
#         #   operator: In
#         #   values: ["t","c", "m", "r"]
#           # minValues here enforces the scheduler to consider at least that number of unique instance-category to schedule the pods.
#           # This field is ALPHA and can be dropped or replaced at any time
#         #   minValues: 2
#         - key: "karpenter.k8s.aws/instance-family"
#           operator: In
#           values: ["t3","m5","c5","r5"]
#         #   minValues: 5
#         - key: "karpenter.k8s.aws/instance-cpu"
#           operator: In
#           values: ["2","4", "8"]
#         - key: "karpenter.k8s.aws/instance-size"
#           operator: In
#           values: ["nano","micro"]
#         - key: "karpenter.k8s.aws/instance-hypervisor"
#           operator: In
#           values: ["nitro"]
#         # - key: "karpenter.k8s.aws/instance-generation"
#         #   operator: Gt
#         #   values: ["2"]
#         - key: "topology.kubernetes.io/zone"
#           operator: In
#           values: ["us-west-2a", "us-west-2b"]
#         - key: "kubernetes.io/arch"
#           operator: In
#           values: ["amd64"]
#         - key: "karpenter.sh/capacity-type"
#           operator: In
#           values: ["spot"]

#   # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
#   # Configuration in this section constrains how aggressive Karpenter can be with performing operations
#   # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost
#   disruption:
#     # Describes which types of Nodes Karpenter should consider for consolidation
#     # If using 'WhenEmptyOrUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace Nodes when it discovers that the Node is empty or underutilized and could be changed to reduce cost
#     # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods
#     consolidationPolicy: WhenEmptyOrUnderutilized | WhenEmpty

#     # The amount of time Karpenter should wait to consolidate a node after a pod has been added or removed from the node.
#     # You can choose to disable consolidation entirely by setting the string value 'Never' here
#     consolidateAfter: 1m | Never # Added to allow additional control over consolidation aggressiveness

#     # Budgets control the speed Karpenter can scale down nodes.
#     # Karpenter will respect the minimum of the currently active budgets, and will round up
#     # when considering percentages. Duration and Schedule must be set together.
#     budgets:
#     - nodes: 10%
#     # On Weekdays during business hours, don't do any deprovisioning.
#     - schedule: "0 9 * * mon-fri"
#       duration: 8h
#       nodes: "0"

#   # Resource limits constrain the total size of the pool.
#   # Limits prevent Karpenter from creating new instances once the limit is exceeded.
#   limits:
#     cpu: "10"
#     memory: 10Gi

#   # Priority given to the NodePool when the scheduler considers which NodePool
#   # to select. Higher weights indicate higher priority when comparing NodePools.
#   # Specifying no weight is equivalent to specifying a weight of 0.
#   weight: 10
# status:
#   conditions:
#     - type: Initialized
#       status: "False"
#       observedGeneration: 1
#       lastTransitionTime: "2024-02-02T19:54:34Z"
#       reason: NodeClaimNotLaunched
#       message: "NodeClaim hasn't succeeded launch"
#   resources:
#     cpu: "20"
#     memory: "8192Mi"
#     ephemeral-storage: "100Gi"